{"version":3,"sources":["images/loader.png","images/ded_rat.png","components/Nav.js","components/RatData.js","components/Login.js","components/ArenaStats.js","components/Rat.js","components/Rats.js","api/index.js","components/RequestCharacters.js","components/App.js","serviceWorker.js","index.js","images/logo.png"],"names":["module","exports","Nav","className","src","SewerLogo","alt","RatList","displayName","rname","server","slug","characterName","Login","milliseconds","d","Date","result","toDateString","toLocaleTimeString","ArenaStats","data","rating","season_match_statistics","played","won","lost","cleanString","string","optionalSuffix","replace","toLowerCase","Rat","character","gender","charClass","race","level","ilevel","pvp","avatar_url","last_login","bust_url","render_url","name","Accordion","Card","Toggle","as","Header","eventKey","icon","faWheelchair","faMars","faVenus","Collapse","Body","Table","bordered","hover","size","colSpan","a2","a3","Button","variant","href","target","Rats","characters","length","map","i","realm","average_item_level","character_class","last_login_timestamp","key","en_US","BlizzAPI","require","api","this","blizzApi","region","clientId","process","clientSecret","realmSlug","query","LOADER","DED_RAT","RequestCharacters","useState","setCharacters","isLoading","setIsLoading","error","setError","callApis","rat","a","newRat","getProfile","profile","getImages","images","getArenaBracket","arena","console","getCharacterProfiles","Promise","all","useEffect","then","charactersData","j","Math","floor","random","temp","catch","log","message","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b47653bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.47da510e.png\";","module.exports = __webpack_public_path__ + \"static/media/ded_rat.9e0c3117.png\";","import React from \"react\";\r\nimport SewerLogo from \"../images/logo.png\";\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <div className=\"nav\">\r\n      <img src={SewerLogo} alt=\"The Sewer\"></img>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","const RatList = [\r\n  {\r\n    displayName: \"Kj\",\r\n    rname: \"Kyle\",\r\n    server: \"Tichondrius\",\r\n    slug: \"tichondrius\",\r\n    characterName: \"pseudocode\",\r\n  },\r\n  {\r\n    displayName: \"Pizzasupper\",\r\n    rname: \"Todd\",\r\n    server: \"Area 52\",\r\n    slug: \"area-52\",\r\n    characterName: \"detresse\",\r\n  },\r\n  {\r\n    displayName: \"Brain\",\r\n    rname: \"Brian\",\r\n    server: \"Area 52\",\r\n    slug: \"area-52\",\r\n    characterName: \"bighamspankr\",\r\n  },\r\n  {\r\n    displayName: \"Ben\",\r\n    rname: \"Ben\",\r\n    server: \"Area 52\",\r\n    slug: \"area-52\",\r\n    characterName: \"daporksword\",\r\n  },\r\n  {\r\n    displayName: \"tomb\",\r\n    rname: \"Tom\",\r\n    server: \"Area 52\",\r\n    slug: \"area-52\",\r\n    characterName: \"bennet\",\r\n  },\r\n  {\r\n    displayName: \"Cashews\",\r\n    rname: \"Pete\",\r\n    server: \"Area 52\",\r\n    slug: \"area-52\",\r\n    characterName: \"moldman\",\r\n  },\r\n  {\r\n    displayName: \"Muenster\",\r\n    rname: \"Dalton\",\r\n    server: \"Tichondrius\",\r\n    slug: \"tichondrius\",\r\n    characterName: \"hellim\",\r\n  },\r\n  {\r\n    displayName: \"Drlol\",\r\n    rname: \"Cody\",\r\n    server: \"Mug'thol\",\r\n    slug: \"mugthol\",\r\n    characterName: \"fluentx\",\r\n  },\r\n  {\r\n    displayName: \"Fizzle\",\r\n    rname: \"Josh\",\r\n    server: \"Kil'jaeden\",\r\n    slug: \"kiljaeden\",\r\n    characterName: \"stend√°r\",\r\n  },\r\n];\r\n\r\nexport default RatList;\r\n","import React from \"react\";\r\n\r\nfunction Login({ milliseconds }) {\r\n  const d = new Date(milliseconds);\r\n  const result =\r\n    d.toDateString(milliseconds) + \" \" + d.toLocaleTimeString(milliseconds);\r\n  return (\r\n    <div className=\"login\">\r\n      <div>Last Login: {result}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\n\r\nfunction ArenaStats({ data }) {\r\n  return (\r\n    <tbody>\r\n      <tr>\r\n        <td className=\"tableFont\">Current Rating:</td>\r\n        <td className=\"tableFont tableResult\">\r\n          {data.rating ? data.rating : 0}\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td className=\"tableFont\">Games:</td>\r\n        <td className=\"tableFont tableResult\">\r\n          {data.season_match_statistics\r\n            ? data.season_match_statistics.played\r\n            : 0}\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td className=\"tableFont\">Wins:</td>\r\n        <td className=\"tableFont tableResult\">\r\n          {data.season_match_statistics ? data.season_match_statistics.won : 0}\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td className=\"tableFont\">Losses:</td>\r\n        <td className=\"tableFont tableResult\">\r\n          {data.season_match_statistics ? data.season_match_statistics.lost : 0}\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  );\r\n}\r\n\r\nexport default ArenaStats;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faMars,\r\n  faVenus,\r\n  faWheelchair,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Login from \"./Login\";\r\nimport ArenaStats from \"./ArenaStats\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nfunction cleanString(string, optionalSuffix) {\r\n  optionalSuffix = optionalSuffix || \"\";\r\n  return string.replace(/\\s/g, \"\").toLowerCase() + optionalSuffix;\r\n}\r\n\r\nfunction Rat({\r\n  rname,\r\n  server,\r\n  slug,\r\n  character,\r\n  gender,\r\n  charClass,\r\n  race,\r\n  level,\r\n  ilevel,\r\n  pvp,\r\n  avatar_url,\r\n  bust_url,\r\n  render_url,\r\n  name,\r\n  last_login,\r\n}) {\r\n  return (\r\n    <Accordion>\r\n      <Card>\r\n        <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n          <div className={`rat-container ${cleanString(charClass)}`}>\r\n            <img\r\n              src={avatar_url}\r\n              className=\"avatar\"\r\n              alt=\"character avatar\"\r\n            ></img>\r\n            <div className=\"rat-inner\">\r\n              <div className=\"name\">{character}</div>\r\n              <div className=\"server\">{server}</div>\r\n              <div>\r\n                Level: <span className=\"level\">{level}</span>\r\n              </div>\r\n              <div className=\"tag\">\r\n                {rname === \"Brian\" ? (\r\n                  <span>\r\n                    <FontAwesomeIcon icon={faWheelchair} />\r\n                  </span>\r\n                ) : gender === \"Male\" ? (\r\n                  <span>\r\n                    <FontAwesomeIcon icon={faMars} />\r\n                  </span>\r\n                ) : (\r\n                  <span>\r\n                    <FontAwesomeIcon icon={faVenus} />\r\n                  </span>\r\n                )}{\" \"}\r\n                {race} {charClass}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Accordion.Toggle>\r\n        <Accordion.Collapse eventKey=\"0\">\r\n          <Card.Body>\r\n            <div className=\"info-wrapper\">\r\n              <Table bordered hover size=\"sm\">\r\n                <thead>\r\n                  <tr>\r\n                    <th colSpan=\"2\">Average Item Level:</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td colSpan=\"2\" className=\"tableResult\">\r\n                      {ilevel}\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n                <thead>\r\n                  <tr>\r\n                    <th colSpan=\"2\">2v2</th>\r\n                  </tr>\r\n                </thead>\r\n                <ArenaStats data={pvp ? pvp.a2 : 0} />\r\n                <thead>\r\n                  <tr>\r\n                    <th colSpan=\"2\">3v3</th>\r\n                  </tr>\r\n                </thead>\r\n                <ArenaStats data={pvp ? pvp.a3 : 0} />\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"armory\" colSpan=\"2\">\r\n                      <Button\r\n                        size=\"lg\"\r\n                        variant=\"secondary\"\r\n                        href={`https://worldofwarcraft.com/en-us/character/us/${slug}/${cleanString(\r\n                          character\r\n                        )}`}\r\n                        target=\"_blank\"\r\n                      >\r\n                        {character}'s Armory\r\n                      </Button>\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n              </Table>\r\n              <Login milliseconds={last_login} />\r\n            </div>\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n\r\n    // <div className=\"rat-container\" key={character}>\r\n    //   <div className={`rat-name ${cleanString(charClass)}`}>\r\n    //     <a\r\n    //       href={`https://worldofwarcraft.com/en-us/character/us/${slug}/${character.toLowerCase()}`}\r\n    //     >\r\n    //       {character}\r\n    //     </a>\r\n    //   </div>\r\n  );\r\n}\r\n\r\nexport default Rat;\r\n","import React from \"react\";\r\nimport Rat from \"./Rat\";\r\n\r\nconst Rats = ({ characters }) => {\r\n  return (\r\n    <div className=\"rat-list\">\r\n      {characters.length === 0 ? (\r\n        <h1>No Characters Found</h1>\r\n      ) : (\r\n        characters.map((character, i) => {\r\n          const {\r\n            name,\r\n            rname,\r\n            realm,\r\n            gender,\r\n            race,\r\n            level,\r\n            average_item_level,\r\n            character_class,\r\n            displayName,\r\n            pvp,\r\n            avatar_url,\r\n            bust_url,\r\n            render_url,\r\n            last_login_timestamp,\r\n          } = character;\r\n\r\n          return (\r\n            <Rat\r\n              key={name}\r\n              name={displayName}\r\n              rname={rname}\r\n              server={realm.name.en_US}\r\n              slug={realm.slug}\r\n              character={name}\r\n              gender={gender.name.en_US}\r\n              charClass={character_class.name.en_US}\r\n              race={race.name.en_US}\r\n              level={level}\r\n              ilevel={average_item_level}\r\n              pvp={pvp}\r\n              avatar_url={avatar_url}\r\n              bust_url={bust_url}\r\n              render_url={render_url}\r\n              last_login={last_login_timestamp}\r\n            />\r\n          );\r\n        })\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rats;\r\n","const BlizzAPI = require(\"blizzapi\");\r\n\r\nclass APIService {\r\n  constructor() {\r\n    this.blizzApi = new BlizzAPI({\r\n      region: \"us\",\r\n      clientId: process.env.REACT_APP_BLIZZARD_CLIENT_ID,\r\n      clientSecret: process.env.REACT_APP_BLIZZARD_CLIENT_SECRET,\r\n    });\r\n    //this.arenaBrackets = [\"2v2\", \"3v3\"];\r\n  }\r\n\r\n  async getImages(realmSlug, characterName) {\r\n    return await this.blizzApi.query(\r\n      `/profile/wow/character/${realmSlug}/${characterName}/character-media?namespace=profile-us`\r\n    );\r\n  }\r\n\r\n  async getArenaBracket(realmSlug, characterName) {\r\n    try {\r\n      const a2 = await this.blizzApi.query(\r\n        `/profile/wow/character/${realmSlug}/${characterName}/pvp-bracket/2v2?namespace=profile-us`\r\n      );\r\n      const a3 = await this.blizzApi.query(\r\n        `/profile/wow/character/${realmSlug}/${characterName}/pvp-bracket/3v3?namespace=profile-us`\r\n      );\r\n      const result = { a2, a3 };\r\n      return { pvp: result };\r\n    } catch (error) {\r\n      // Catching errors here since this API call returns a 404 anytime a character doesn't have arena data.\r\n      // This will prevent Promise.all from erroring out when it really shouldn't\r\n      return { pvp: null };\r\n    }\r\n  }\r\n\r\n  async getProfile(realmSlug, characterName, rname) {\r\n    const result = await this.blizzApi.query(\r\n      `/profile/wow/character/${realmSlug}/${characterName}?namespace=profile-us`\r\n    );\r\n    result.rname = rname;\r\n    return result;\r\n  }\r\n}\r\n\r\nexport const api = new APIService();\r\n","import React, { useState, useEffect } from \"react\";\r\nimport RatList from \"./RatData\";\r\nimport Rats from \"./Rats\";\r\nimport { api } from \"../api\";\r\n\r\nconst LOADER = require(\"../images/loader.png\");\r\nconst DED_RAT = require(\"../images/ded_rat.png\");\r\n\r\nconst RequestCharacters = () => {\r\n  const [characters, setCharacters] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const callApis = async (rat) => {\r\n    const { slug, characterName, rname } = rat;\r\n    let newRat = { ...rat };\r\n\r\n    try {\r\n      const profile = await api.getProfile(slug, characterName, rname);\r\n      const images = await api.getImages(slug, characterName);\r\n      const arena = await api.getArenaBracket(slug, characterName);\r\n      // This merges all data returned from the API into the root level of character.\r\n      // NOTE: Data WILL get overwritten if they share the same key so the merge order does matter.\r\n      // For exmaple if images and profile both have 'name' at the root, profile will overwrite it\r\n      newRat = { ...newRat, ...images, ...profile, ...arena };\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n\r\n    return newRat;\r\n  };\r\n\r\n  const getCharacterProfiles = async () => {\r\n    try {\r\n      return Promise.all(\r\n        RatList.map((rat) => {\r\n          return callApis(rat);\r\n        })\r\n      );\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCharacterProfiles()\r\n      .then((charactersData) => {\r\n        // Randomize the character order\r\n        for (let i = charactersData.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * i);\r\n          const temp = charactersData[i];\r\n          charactersData[i] = charactersData[j];\r\n          charactersData[j] = temp;\r\n        }\r\n\r\n        setCharacters(charactersData);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        setError(error.message);\r\n        setIsLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"loading-container\">\r\n        <img className=\"rotate\" src={LOADER} alt=\"loading\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"error-container\">\r\n        <div className=\"error-text\">\r\n          <code>Error! {error}</code>\r\n        </div>\r\n        <img className=\"ded-rat\" src={DED_RAT} alt=\"error\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <Rats characters={characters} />;\r\n};\r\n\r\nexport default RequestCharacters;\r\n","import React from \"react\";\r\nimport Nav from \"./Nav\";\r\nimport RequestCharacters from \"./RequestCharacters\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Nav />\r\n      <div className=\"main\">\r\n        <RequestCharacters />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.92f74779.png\";"],"sourceRoot":""}